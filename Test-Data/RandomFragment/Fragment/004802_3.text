"""high-level initialization routines.

These routines provide high level interfaces to initialize potential terms
and to set up minimization and dynamics calculations.
"""
from xplor import command
from atomSel import AtomSel

def initParams(files):
    """argument is a filename or list of filenames to read.
    First the current directory is searched for the file, and then TOPPAR
    is searched.
    XPLOR parameters are documented <l http://nmr.cit.nih.gov/xplor-nih/xplorMan/node48.html#SECTION00420000000000000000
    here>.
    """
    import os
    from os import environ as env

    def addParams(file):
        command("param @%s end" %file)
        return


    if type(files)==type("string"):
        files=[files]
        pass
    for file in files:
        try:
            os.stat(file)
            addParams(file)
        except OSError:
            tfile = env['TOPPAR'] + '/' + file
            try:
                os.stat(tfile)
                addParams('TOPPAR:'+file)
            except OSError:
                raise "initParams: could not find file " + file +\
                      " in current dir, or in TOPPAR";
            pass
        pass
    return

def initStruct(files=0,
               erase=1):
    """read XPLOR PSF files.

    the file argument is a filename or list of filenames to read.
    First the current directory is searched for the file, and then TOPPAR
    is searched. Alternatively, a psf entry (starting with PSF...) can be
    directly passed as the files argument.

    Any pre-existing structure information is erased unless the erase argument
    is cleared. 
    """
    if erase: command("struct reset end")

    if not files: return
    
    import re, os
    if type(files)==type("string"):
        if re.search("PSF\s*\n",files):
            command("struct %s end" % files)
            return
        else:
            files=[files]
            pass
        pass
    for file in files:
        try:
            os.stat(file)
            command("struct @%s end" %file)
        except OSError:
            from os import environ as env
            tfile = env['TOPPAR'] + '/' + file
            try:
                os.stat(tfile)
                command("struct @TOPPAR:%s end" %file)
            except OSError:
                raise "initStruct: could not find file " + file +\
                      " in current dir, or in TOPPAR";
            pass
        pass
    return
    
            
        

def initNBond(cutnb=4.5,
              rcon=1.0,
              nbxmod=3,
              tolerance=0.5,
              repel=0.9):
    """standard initialization of the non-bonded repel potential. The XPLOR
    nonbonded potential term is described <l http://nmr.cit.nih.gov/xplor-nih/xplorMan/node116.html#SECTION00530000000000000000
    here>
    """
    command("""
    parameters
    nbonds
    atom
    nbxmod %d
    wmin  =   0.01  ! warning off
    cutnb =   %f   ! nonbonded cutoff
    tolerance %f
    repel=    %f   ! scale factor for vdW radii = 1 ( L-J radii)
    rexp   =  2     ! exponents in (r^irex - R0^irex)^rexp
    irex   =  2
    rcon=%f      ! actually set the vdW weight
    end
    end 
    """ % (nbxmod,cutnb,tolerance,repel,rcon) )

def initRamaDatabase(type='protein'):
    """standard initialization of the <l http://nmr.cit.nih.gov/xplor-nih/xplorMan/node373k.html
    rama torsion-angle database potential>.
    """
    command("""
    set message off echo off end
    eval ($krama=1.)
    rama
    nres=10000
    end
    """)
    if type=='protein':
        command("""
        rama
        @QUARTS:2D_quarts_new.tbl
        @QUARTS:3D_quarts_new.tbl
        @QUARTS:forces_torsion_prot_quarts_intra.tbl
        end
        @QUARTS:setup_quarts_torsions_intra_2D3D.tbl
        set message on echo on end
        """)
    elif type=='nucleic':
        command("""
        evaluate ($knuc=1.0)
        rama
        @QUARTS:nucleic_deltor_quarts2d.tbl
        @QUARTS:nucleic_deltor_quarts3d.tbl
        @QUARTS:nucleic_deltor_quarts4d.tbl
        @QUARTS:force_nucleic_quarts2d.tbl
        @QUARTS:force_nucleic_quarts3d.tbl
        @QUARTS:force_nucleic_quarts4d.tbl
        end
        @QUARTS:setup_nucleic_2d3d.tbl
        @QUARTS:setup_nucleic_4d.tbl
        set message on echo on end
        """)
    else:
        raise "initRamaDatabase: unknown database type:", type
    return

def initDihedrals(filenames=[], scale=1, useDefaults=1):
    """initialize the XPLOR <l http://nmr.cit.nih.gov/xplor-nih/xplorMan/node369.html#SECTION001970000000000000000
    restraints dihe (CDIH) potential term>.

    parameters are:
       filenames   - either a single filename, or a sequence of filenames of
                     dihedral restraint assignment tables.
       scale       - scale factor (defaults to 1).
       useDefaults - use the default sidechain restraints (default: TRUE)
    """
    command("set echo off mess off end")
    command("""
    restraints dihed 
    reset
    scale %f
    nass = 10000
    end""" % scale)
    if type(filenames)==type("string"): filenames = [filenames]
    for file in filenames:
        command("restraints dihed @%s end" % file)
        pass
    if useDefaults:
        command("""
!
! phe_angles.tbl
!
! constrains the chi2 angles of phe, tyr, asp, and glu
! in a protein to 0..180 degrees
!
! JJK 3/10/97
!

for $res in id (name ca and (resn phe or resn tyr)) loop ang

   restraints dihedral 
      assign 
         (byresidue id $res and name ca)
         (byresidue id $res and name cb)
         (byresidue id $res and name cg)
         (byresidue id $res and name cd1)
         1.0 90.0 30.0 2
   end

end loop ang

for $res in id (name ca and resn asp) loop ang

   restraints dihedral 
      assign 
         (byresidue id $res and name ca)
         (byresidue id $res and name cb)
         (byresidue id $res and name cg)
         (byresidue id $res and name od1)
         10.0 0.0 90.0 2
   end

end loop ang

for $res in id (name ca and resn glu) loop ang

   restraints dihedral 
      assign 
         (byresidue id $res and name cb)
         (byresidue id $res and name cg)
         (byresidue id $res and name cd)
         (byresidue id $res and name oe1)
         10.0 0.0 90.0 2
   end

end loop ang
""")
        pass
    command("set echo on mess on end")
    return

def initCollapse(sel    ="all",
                 Rtarget=-1,
                 scale  =1):
    """initialize the XPLOR <l http://nmr.cit.nih.gov/xplor-nih/xplorMan/node373n.html
    radius of gyration potential term>.

    parameters are:
       sel - string or atom selection specifying atoms in include in the
             Rgyr calculation. If this is omitted, all atoms are included.
       Rtarget - target radius. If this is omitted, the target Rgyr is
                 calculated as
                    Rgyr = 2.2*numResidues^0.38 -1 [angstrom]
      scale - scale factor. If omitted, it defaults to 1. Note that the
              per-assignment scale is always 100, so the energy is actually
              scaled by 100*scale.
    """

    if type(sel)==type("string"): sel = AtomSel(sel)

    from selectTools import numResidues
    numResidues = numResidues(sel)
    if Rtarget<0:
        Rtarget = (2.2 * numResidues**0.38 -1)
        pass
    
    command("""
    collapse
    assign (%s) 100.0 %f
    scale %f
    end""" % (sel.string(), Rtarget, scale))
    return

def initMinimize(ivm,
                 potList=0,
                 printInterval=10,
                 numSteps=500,
                 maxCalls=20000):
    """initialize an IVM object (from the <m ivm> module)
    for Powell minimization.

    In addition to the function arguments, the following IVM parameters are
    initialized:
      constrainLengths
      maxDeltaE
      eTolerance
      gTolerance
      dEpred
    """
    ivm.resetReuse()
    ivm.setConstrainLengths(0)
    ivm.setMaxDeltaE( 10000 )
    ivm.setStepType("powell")
    ivm.setNumSteps( numSteps )
    ivm.setMaxCalls( maxCalls )
    ivm.setPrintInterval( printInterval )
    ivm.setETolerance(1e-7)
    ivm.setGTolerance(1e-8)
    ivm.setDEpred(0.001)
    if potList: ivm.setPotList( potList )
    return

def initDynamics(ivm,
                 bathTemp=-1,
                 finalTime=0.2,
                 numSteps=0,
                 stepsize=0.001,
                 potList=0,
                 printInterval=50,
                 initVelocities=0
                 ):
    """
    initialize an IVM object (from the <m ivm> module)
    for PC6 (6th order predictor-corrector) dynamics.

    In addition to the function arguments, the following IVM parameters are
    initialized:
      constraintLengths
      maxDeltaE
      responseTime
      eTolerance
      adjustStepsize
      scaleVel
      resetCMInterval

    additionally, if initVelocities!=0, the initial velocities will be
    randomized
    """
    from atomAction import randomizeVelocities
    ivm.resetReuse()
    if bathTemp>=0:
        ivm.setBathTemp(bathTemp)
        if initVelocities: randomizeVelocities( bathTemp )
        pass
    ivm.setConstrainLengths(0)
    ivm.setMaxDeltaE( 10000 )
    ivm.setStepType("pc6")
    ivm.setResponseTime(5)
    ivm.setStepsize( stepsize ) #initial stepsize value
    ivm.setETolerance( ivm.bathTemp()/1000 )
    ivm.setPrintInterval( printInterval )
    ivm.setAdjustStepsize(1)
    ivm.setScaleVel(1)
    ivm.setResetCMInterval( 10 )
    ivm.setFinalTime(finalTime)
    ivm.setNumSteps(numSteps)
    if potList: ivm.setPotList( potList )
    return

def torsionTopology(ivm,fixedOmega=0):
    """configure the <m ivm>.IVM tolopogy for standard torsion angle setup:
    group rigid sidechains and break proline, ribose rings in the
    appropriate places. If fixedOmega is set, also fix protein omega backbone
    angles. 
    """
    import selectTools
    if fixedOmega: selectTools.IVM_groupRigidBackbone(ivm)
    selectTools.IVM_groupRigidSidechain(ivm)
    selectTools.IVM_breakProlines(ivm)
    selectTools.IVM_breakRiboses(ivm)
    ivm.autoTorsion()
    return

def fixupCovalentGeom(sel=0,
                      useVDW=0,
                      useDynamics=1,
                      maxIters=40,
                      ):
    """given the atoms in selection sel
    """
    from atomSel import AtomSel
    
    import xplor
    xplor.command("set mess=off print=off echo=off end")

    if not sel: sel = AtomSel("known")

    xplor.command("constraints interaction (%s) (%s) end" %
                  (sel.string(),sorm their bonds) and the X
    coordinate is the atom number divided by 10. This will result in
    an extended configuration along the X axis.
    """

    from atomSel import AtomSel
    if not sel: sel = AtomSel("known")

    from atomAction import SetProperty
    import random
    from vec3 import Vec3
    for atom in AtomSel("all"):
        atom.setPos( Vec3(float(atom.index())/10,
                          random.uniform(-0.5,0.5),
                          random.uniform(-0.5,0.5)) )
        pass

    fixupCovalentGeom(useVDW=1,maxIters=100,sel=sel)


    
