"""high-level initialization routines.

These routines provide high level interfaces to initialize potential terms
and to set up minimization and dynamics calculations.
"""
from xplor import command
from atomSel import AtomSel

def initParams(files):
    """argument is a filename or list of filenames to read.
    First the current directory is searched for the file, and then TOPPAR
    is searched.
    XPLOR parameters are documented <l http://nmr.cit.nih.gov/xplor-nih/xplorMan/node48.html#SECTION00420000000000000000
    here>.
    """
    import os
    from os import environ as env

    def addParams(file):
        command("param @%s end" %file)
        return


    if type(files)==type("string"):
        files=[files]
        pass
    for file in files:
        try:
            os.stat(file)
            addParams(file)
        except OSError:
            tfile = env['TOPPAR'] + '/' + file
            try:
                os.stat(tfile)
                addParams('TOPPAR:'+file)
            except OSError:
                raise "initParams: could not find file " + file +\
                      " in current dir, or in TOPPAR";
            pass
        pass
    return

def initStruct(files=0,
               erase=1):
    """read XPLOR PSF files.

    the file argument is a filename or list of filenames to read.
    First the current directory is searched for the file, and then TOPPAR
    is searched. Alternatively, a psf entry (starting with PSF...) can be
    directly passed as the files argument.

    Any pre-existing structure information is erased unless the erase argument
    is cleared. 
    """
    if erase: command("struct reset end")

    if not files: return
    
    import re, os
    if type(files)==type("string"):
        if re.search("PSF\s*\n",files):
            command("struct %s end" % files)
            return
        else:
            files=[files]
            pass
        pass
    for file in files:
        try:
            os.stat(file)
            command("struct @%s end" %file)
        except OSError:
            from os import environ as env
            tfile = env['TOPPAR'] + '/' + file
            try:
                os.stat(tfile)
                command("struct @TOPPAR:%s end" %file)
            except OSError:
                raise "initStruct: could not find file " + file +\
                      " in current dir, or in TOPPAR";
            pass
        pass
    return
    
            
        

def initNBond(cutnb=4.5,
              rcon=1.0,
              nbxmod=3,
              tolerance=0.5,
              repel=0.9):
    """standard initialization of the non-bonded repel potential. The XPLOR
    nonbonded potential term is described <l http://nmr.cit.nih.gov/xplor-nih/xplorMan/node116.html#SECTION00530000000000000000
    here>
    """
    command("""
    parameters
    nbonds
    atom
    nbxmod %d
    wmin  =   0.01  ! warning off
    cutnb =   %f   ! nonbonded cutoff
    tolerance %f
    repel=    %f   ! scale factor for vdW radii = 1 ( L-J radii)
    rexp   =  2     ! exponents in (r^irex - R0^irex)^rexp
    irex   =  2
    rcon=%f      ! actually set the vdW weight
    end
    end 
    """ % (nbxmod,cutnb,tolerance,repel,rcon) )

def initRamaDatabase(type='protein'):
    """standard initialization of the <l http://nmr.cit.nih.gov/xplor-nih/xplorMan/node373k.html
    rama torsion-angle database potential>.
    """
    command("""
    set message off echo off end
    eval ($krama=1.)
    rama
    nres=10000
    end
    """)
    if type=='protein':
        command("""
        rama
        @QUARTS:2D_quarts_new.tbl
        @QUARTS:3D_quarts_new.tbl
        @QUARTS:forces_torsion_prot_quarts_intra.tbl
        end
        @QUARTS:setup_quarts_torsions_intra_2D3D.tbl
        set message on echo on end
        """)
    elif type=='nucleic':
        command("""
        evaluate ($knuc=1.0)
        rama
        @QUARTS:nucleic_deltor_quarts2d.tbl
        @QUARTS:nucleic_deltor_quarts3d.tbList: ivm.setPotList( potList )
    return

def initDynamics(ivm,
                 bathTemp=-1,
                 finalTime=0.2,
                 numSteps=0,
                 stepsize=0.001,
                 potList=0,
                 printInterval=50,
                 initVelocities=0
                 ):
    """
    initialize an IVM object (from the <m ivm> module)
    for PC6 (6th order predictor-corrector) dynamics.

    In addition to the function arguments, the following IVM parameters are
    initialized:
      constraintLengths
      maxDeltaE
      responseTime
      eTolerance
      adjustStepsize
      scaleVel
      resetCMInterval

    additionally, if initVelocities!=0, the initial velocities will be
    randomized
    """
    from atomAction import randomizeVelocities
    ivm.resetReuse()
    if bathTemp>=0:
        ivm.setBathTemp(bathTemp)
        if initVelocities: randomizeVelocities( bathTemp )
        pass
    ivm.setConstrainLengths(0)
    ivm.setMaxDeltaE( 10000 )
    ivm.setStepType("pc6")
    ivm.setResponseTime(5)
    ivm.setStepsize( stepsize ) #initial stepsize value
    ivm.setETolerance( ivm.bathTemp()/1000 )
    ivm.setPrintInterval( printInterval )
    ivm.setAdjustStepsize(1)
    ivm.setScaleVel(1)
    ivm.setResetCMInterval( 10 )
    ivm.setFinalTime(finalTime)
    ivm.setNumSteps(numSteps)
    if potList: ivm.setPotList( potList )
    return

def torsionTopology(ivm,fixedOmega=0):
    """configure the <m ivm>.IVM tolopogy for standard torsion angle setup:
    group rigid sidechains and break proline, ribose rings in the
    appropriate places. If fixedOmega is set, also fix protein omega backbone
    angles. 
    """
    import selectTools
    if fixedOmega: selectTools.IVM_groupRigidBackbone(ivm)
    selectTools.IVM_groupRigidSidechain(ivm)
    selectTools.IVM_breakProlines(ivm)
    selectTools.IVM_breakRiboses(ivm)
    ivm.autoTorsion()
    return

def fixupCovalentGeom(sel=0,
                      useVDW=0,
                      useDynamics=1,
                      maxIters=40,
                      ):
    """given the atoms in selection sel
    """
    from atomSel import AtomSel
    
    import xplor
    xplor.command("set mess=off print=off echo=off end")

    if not sel: sel = AtomSel("known")

    xplor.command("constraints interaction (%s) (%s) end" %
                  (sel.string(),sel.string()))

    xplor.command("flags exclude * include scripting end")
    
    def covalentViols():

        ret = map(lambda (name,thresh):
                  int(xplor.command("print threshold %f %s end"%(thresh,name),
                                    "violations")[0]),
                  (("bonds",0.01),
                   ("angles",5.0),
                   ("impropers",5.0)))
        return ret
    

    potCombinations = [("bond",),
                       ("bond","angl"),
                       ("bond","impr"),
                       ("bond","angl","impr")]

    if useVDW:
        initNBond(nbxmod=2,cutnb=6.5,tolerance=2.0,repel=0.8,rcon=0.01)
        potCombinations.append(("bond","angl","impr","vdw"))
        pass

    import random
    from xplorPot import XplorPot
    potCombinations = map(lambda list:map(lambda name:XplorPot(name),list),
                          potCombinations)

    from atomAction import SetProperty
    actions = ["min","min","min"]
    if useDynamics:
        sel.apply(SetProperty("mass",100.))
        sel.apply(SetProperty("fric",10.))
        actions.append("dyn")
        pass



    for iter in range(0,maxIters):

        viols=covalentViols()
        numViols=reduce(lambda x,y:x+y,viols)

        if numViols==0: break


	#
	# randomly choose which minimization scheme to apply
	#
        pots = random.choice(potCombinations)

        xplor.simulation.potList().removeAll()
        for pot in pots:
            xplor.simulation.potList().add( pot )
            pass

        action = random.choice(actions)

        if action=="min":
            xplor.command("mini powell nstep 500 nprint 600 drop 10 end")
        else:
	    xplor.command("""dynamics verlet 
                               nstep 500 time 0.001 nprint 600 iprfrq 0
                               iasvel maxwell firsttemp 1000
                               tbath 1000
                             end""")
            pass
        pass

    if numViols>0:

        mess = "Covalent geometry still violated after fixupCovalentGeom\n"
        mess += ("(%d bond viols, %d angle viols, %d improper viols)\n" %
                 tuple(viols))
        
        if not useVDW:
            mess += "Try increasing maxIters or enabling the useVdw flag."
        else:
            "Try increasing maxIters."
            pass
        raise mess
        pass

    xplor.command("set mess=$prev_Messages print=OUTPUT echo=$prev_Echo end")

    return

def genExtendedStructure(sel=0):
    """
    This assigns X, Y, and Z coordinates to each atom, and then calls
    <m protocol>.fixupCovalentGeom() to correct the covalent geometry.

    The Y and Z coordinates are random (but small enough (within a range
    of -0.5 to 0.5) to allow bonded atoms to form their bonds) and the X
    coordinate is the atom number divided by 10. This will result in
    an extended configuration along the X axis.
    """

    from atomSel import AtomSel
    if not sel: sel = AtomSel("known")

    from atomAction import SetProperty
    import random
    from vec3 import Vec3
    for atom in AtomSel("all"):
        atom.setPos( Vec3(float(atom.index())/10,
                          random.uniform(-0.5,0.5),
                          random.uniform(-0.5,0.5)) )
        pass

    fixupCovalentGeom(useVDW=1,maxIters=100,sel=sel)


    
